/*
 * Grafana
 * Grafana Restful API.
 *
 * OpenAPI spec version: v1.0
 * Contact: wang@hashdata.cn
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cn.hashdata.grafana.model;

import java.util.Objects;
import java.util.Arrays;
import cn.hashdata.grafana.model.Annotations;
import cn.hashdata.grafana.model.Panel;
import cn.hashdata.grafana.model.Templating;
import cn.hashdata.grafana.model.Time;
import cn.hashdata.grafana.model.TimePicker;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Dashboard
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-17T14:29:19.214Z")
public class Dashboard {
  @JsonProperty("annotations")
  private Annotations annotations = null;

  @JsonProperty("editable")
  private Boolean editable = null;

  @JsonProperty("graphTooltip")
  private Integer graphTooltip = null;

  @JsonProperty("hideControls")
  private Boolean hideControls = null;

  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("links")
  private List<String> links = null;

  @JsonProperty("panels")
  private List<Panel> panels = null;

  @JsonProperty("refresh")
  private String refresh = null;

  @JsonProperty("schemaVersion")
  private Integer schemaVersion = null;

  @JsonProperty("style")
  private String style = null;

  @JsonProperty("tags")
  private List<String> tags = null;

  @JsonProperty("templating")
  private Templating templating = null;

  @JsonProperty("time")
  private Time time = null;

  @JsonProperty("timepicker")
  private TimePicker timepicker = null;

  @JsonProperty("timezone")
  private String timezone = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("uid")
  private String uid = null;

  @JsonProperty("version")
  private Integer version = null;

  public Dashboard annotations(Annotations annotations) {
    this.annotations = annotations;
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @ApiModelProperty(value = "")
  public Annotations getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Annotations annotations) {
    this.annotations = annotations;
  }

  public Dashboard editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Get editable
   * @return editable
  **/
  @ApiModelProperty(value = "")
  public Boolean isEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }

  public Dashboard graphTooltip(Integer graphTooltip) {
    this.graphTooltip = graphTooltip;
    return this;
  }

   /**
   * Get graphTooltip
   * @return graphTooltip
  **/
  @ApiModelProperty(value = "")
  public Integer getGraphTooltip() {
    return graphTooltip;
  }

  public void setGraphTooltip(Integer graphTooltip) {
    this.graphTooltip = graphTooltip;
  }

  public Dashboard hideControls(Boolean hideControls) {
    this.hideControls = hideControls;
    return this;
  }

   /**
   * Get hideControls
   * @return hideControls
  **/
  @ApiModelProperty(value = "")
  public Boolean isHideControls() {
    return hideControls;
  }

  public void setHideControls(Boolean hideControls) {
    this.hideControls = hideControls;
  }

  public Dashboard id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Dashboard links(List<String> links) {
    this.links = links;
    return this;
  }

  public Dashboard addLinksItem(String linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public List<String> getLinks() {
    return links;
  }

  public void setLinks(List<String> links) {
    this.links = links;
  }

  public Dashboard panels(List<Panel> panels) {
    this.panels = panels;
    return this;
  }

  public Dashboard addPanelsItem(Panel panelsItem) {
    if (this.panels == null) {
      this.panels = new ArrayList<>();
    }
    this.panels.add(panelsItem);
    return this;
  }

   /**
   * Get panels
   * @return panels
  **/
  @ApiModelProperty(value = "")
  public List<Panel> getPanels() {
    return panels;
  }

  public void setPanels(List<Panel> panels) {
    this.panels = panels;
  }

  public Dashboard refresh(String refresh) {
    this.refresh = refresh;
    return this;
  }

   /**
   * Get refresh
   * @return refresh
  **/
  @ApiModelProperty(value = "")
  public String getRefresh() {
    return refresh;
  }

  public void setRefresh(String refresh) {
    this.refresh = refresh;
  }

  public Dashboard schemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Get schemaVersion
   * @return schemaVersion
  **/
  @ApiModelProperty(value = "")
  public Integer getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
  }

  public Dashboard style(String style) {
    this.style = style;
    return this;
  }

   /**
   * Get style
   * @return style
  **/
  @ApiModelProperty(value = "")
  public String getStyle() {
    return style;
  }

  public void setStyle(String style) {
    this.style = style;
  }

  public Dashboard tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Dashboard addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public Dashboard templating(Templating templating) {
    this.templating = templating;
    return this;
  }

   /**
   * Get templating
   * @return templating
  **/
  @ApiModelProperty(value = "")
  public Templating getTemplating() {
    return templating;
  }

  public void setTemplating(Templating templating) {
    this.templating = templating;
  }

  public Dashboard time(Time time) {
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @ApiModelProperty(value = "")
  public Time getTime() {
    return time;
  }

  public void setTime(Time time) {
    this.time = time;
  }

  public Dashboard timepicker(TimePicker timepicker) {
    this.timepicker = timepicker;
    return this;
  }

   /**
   * Get timepicker
   * @return timepicker
  **/
  @ApiModelProperty(value = "")
  public TimePicker getTimepicker() {
    return timepicker;
  }

  public void setTimepicker(TimePicker timepicker) {
    this.timepicker = timepicker;
  }

  public Dashboard timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @ApiModelProperty(value = "")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public Dashboard title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Dashboard uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Get uid
   * @return uid
  **/
  @ApiModelProperty(value = "")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public Dashboard version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dashboard dashboard = (Dashboard) o;
    return Objects.equals(this.annotations, dashboard.annotations) &&
        Objects.equals(this.editable, dashboard.editable) &&
        Objects.equals(this.graphTooltip, dashboard.graphTooltip) &&
        Objects.equals(this.hideControls, dashboard.hideControls) &&
        Objects.equals(this.id, dashboard.id) &&
        Objects.equals(this.links, dashboard.links) &&
        Objects.equals(this.panels, dashboard.panels) &&
        Objects.equals(this.refresh, dashboard.refresh) &&
        Objects.equals(this.schemaVersion, dashboard.schemaVersion) &&
        Objects.equals(this.style, dashboard.style) &&
        Objects.equals(this.tags, dashboard.tags) &&
        Objects.equals(this.templating, dashboard.templating) &&
        Objects.equals(this.time, dashboard.time) &&
        Objects.equals(this.timepicker, dashboard.timepicker) &&
        Objects.equals(this.timezone, dashboard.timezone) &&
        Objects.equals(this.title, dashboard.title) &&
        Objects.equals(this.uid, dashboard.uid) &&
        Objects.equals(this.version, dashboard.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, editable, graphTooltip, hideControls, id, links, panels, refresh, schemaVersion, style, tags, templating, time, timepicker, timezone, title, uid, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dashboard {\n");
    
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    graphTooltip: ").append(toIndentedString(graphTooltip)).append("\n");
    sb.append("    hideControls: ").append(toIndentedString(hideControls)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    panels: ").append(toIndentedString(panels)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    templating: ").append(toIndentedString(templating)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    timepicker: ").append(toIndentedString(timepicker)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

